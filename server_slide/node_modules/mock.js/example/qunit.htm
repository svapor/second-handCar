<!DOCTYPE html>
<html>
    <head>
        <title>Mock.js Example</title>
        <meta http-equiv="Content-type" content="text/html;charset=UTF-8">

        <!-- QUnit includes -->
        <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.10.0.css">
        <script type="text/javascript" src="http://code.jquery.com/qunit/qunit-1.10.0.js"></script>

        <!-- JQuery -->
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js" type="text/javascript"></script>     

        <!-- Testable Objects -->
        <script type="text/javascript" src="example.js"></script>

        <!-- Mock.js -->
        <script type="text/javascript" src="../src/mock.js"></script>
    </head>
    <body>

        <div id="qunit"></div>
        <div id="qunit-fixture"></div>        

        <script>
            
            Mock.created(function()
                {
                    alert("mock created!");
                });

            test("test function callMe()", function() {

                expect(4); // expect three assertions

                /**
                 * Scenario
                 * --------
                 * When we call the function callMe(), we expect
                 * callMeTwo() and callMeThree() to both be called.
                 */


                /**
                 * Step 1. 
                 * -------
                 * First create a mockable object with the functions you
                 * would like to be mocked.
                 */
                var object = new TestObject();

                var callMeTwo = Mock.Spy(object, 'callMeTwo');
                var callMeThree = Mock.Spy(object, 'callMeThree');

                /**
                 * Step 2.
                 * -------
                 * Call the function you would like to test 
                 * (this must be part of the mocked list defined above)
                 */
                object.callMe();


                /**
                 * Step 3.
                 * -------
                 * Run the tests
                 */
                 
                equal(callMeThree.called(), 1, "callMeThree() called once");
                equal(callMeTwo.called(), 2, "callMeTwo() called twice");

                equal("call two result", callMeTwo.returnedWith(), "callMeTwo() returned with correct response");

                /* call deepEqual when comparing arguments */
                deepEqual(callMeTwo.calledWith(), ['arg1', 'arg2'], "callMeTwo() last called with param [arg1, arg2]");
            });

            test("test mocked sync ajax calls", function() {

                // Sync example

                var spy = Mock.Spy(jQuery, "ajax");
                spy.consume("my result");

                jQuery.ajax({
                    url: "example.js"
                });
                
                equal(spy.called(), 1, "jQuery.ajax called once");
                equal(spy.returnedWith(), "my result", "jQuery.ajax returned the result specified");

                // Release mock,s ince it's mocking the global jQuery.ajax
                spy.release();
            });


            asyncTest("test normal ajax calls ", function() {

                expect(1);

                /* this proves the mock has been release */
                jQuery.ajax({
                    url: "example.js"
                }).done(function() {   
                    /* ajax request done */
                    ok(true, "jQuery.ajax completed request successfully");
                    start();
                });
            });

        </script>
    </body>
</html>